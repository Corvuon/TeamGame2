#include "Engine.hpp"
#include "Graphics.hpp"
#include "UI.hpp"
#include "Transform.hpp"
#include "Controller.hpp"
#include "Physics.hpp"
#include "Time.hpp"
#include "Log.hpp"
#include "Audio.hpp"
#include "Input.hpp"
#include "GameState.hpp"
#include <iostream>

using Aspen::Engine::Engine;
using Aspen::GameState::GameState;
using Aspen::GameState::GameStateManager;
using Aspen::Graphics::Graphics;
using Aspen::Object::Object;

int xadjust=319;

void ChangeScene(Aspen::Graphics::UI::Button *button, std::string scene, GameStateManager *gsm)
{
  gsm->SetCurrentState(scene);
};

class PlayerUnit : public Aspen::Object::Object
{
  Aspen::Graphics::Animation *hoverAnim;
  Aspen::Graphics::Graphics *hoverIdle;
  Aspen::Graphics::Animation *hoverDest;
  Aspen::Graphics::Animation *skidAnim;
  Aspen::Graphics::Animation *skidsecAnim;
  Aspen::Graphics::Animation *skidDest;
  Aspen::Graphics::Graphics *skidIdle;
  Aspen::Graphics::Animation *artilleryAnim;
  Aspen::Graphics::Animation *artyDest;
  Aspen::Graphics::Graphics *artyIdle;
  Aspen::Graphics::Animation *heavyAnim;
  Aspen::Graphics::Animation *heavyDest;
  Aspen::Graphics::Graphics *heavyIdle;
  Aspen::Graphics::Animation *hyperAnim;
  Aspen::Graphics::Animation *hyperAnimS;
  Aspen::Graphics::Animation *hyperAnimM;
  Aspen::Graphics::Animation *hyperAnimE;
  Aspen::Graphics::Animation *hyperDest;
  Aspen::Graphics::Graphics *hyperIdle;
  Aspen::Graphics::Animation *mechAnim;
  Aspen::Graphics::Animation *mechDest;
  Aspen::Graphics::Graphics *mechIdle;
  Aspen::Graphics::Graphics *legIdle;
  Aspen::Graphics::Animation *legTurnR;
  Aspen::Graphics::Animation *legTurnL;
  Aspen::Graphics::Animation *legWalkDiag;
  Aspen::Graphics::Animation *legWalkDiag2;
  Aspen::Graphics::Animation *legWalkHoriz;
  Aspen::Graphics::Animation *legWalkVert;
  bool hover = false;
  bool skid = false;
  bool artillery = false;
  bool heavyRepeater = false;
  bool hyperturret = false;
  bool mech = false;
  bool mechanized = false;
  public:
  PlayerUnit(Object *parent = nullptr, std::string name = "PlayerUnit")
  {
  hoverAnim = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(hoverAnim);
  hoverDest = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(hoverDest);
  skidAnim = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(skidAnim);
  skidsecAnim = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(skidsecAnim);
  skidDest = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(skidDest);
  artilleryAnim = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(artilleryAnim);
  artyDest = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(artyDest);
  hyperAnim = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(hyperAnim);
  hyperAnimS = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(hyperAnimS);
  hyperAnimM = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(hyperAnimM);
  hyperAnimE = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(hyperAnimE);
  hyperDest = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(hyperDest);
  heavyAnim = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(heavyAnim);
  heavyDest = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(heavyDest);
  mechAnim = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(mechAnim);
  mechDest = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(mechDest);
  legWalkDiag = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(legWalkDiag);
  legWalkDiag2 = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(legWalkDiag2);
  legWalkHoriz = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(legWalkHoriz);
  legWalkVert = new Aspen::Graphics::Animation(
    new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    AddChild(legWalkVert);

  skidAnim->Deactivate();
  }

  void buildHover(){
    hover = true;
  }
  void buildSkid(){
    skid = true;
  }
  void buildArty(){
    artillery = true;
    mechanized = true;
  }
  void buildArty(){
    PlayerUnit *Arty;
    Arty->artillery = true;
    Arty->mechanized = true;
  }
  void buildMech(){
    Aspen::Graphics::Animation *Mech;
    Mech = new Aspen::Graphics::Animation(new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 0.0f, this, "Firing Cycle");
  }
  while(true)
  {
   void OnUpdate()
   {
      double xv = moveable->GetRigidbody()->GetVelocityX();
      double yv = moveable->GetRigidbody()->GetVelocityY();

      if (Aspen::Input::KeyHeld(SDLK_a)){
        xv = -5;
      }if (Aspen::Input::KeyHeld(SDLK_d)){
        xv = 5;
      }if (Aspen::Input::KeyHeld(SDLK_w)){
        yv = -5;
     }if (Aspen::Input::KeyHeld(SDLK_s)){
       yv = 5;
      }
     moveable->GetRigidbody()->SetCartesianVelocity(xv, yv);
    }
  };
};
class EnemyUnit : Aspen::Graphics::Animation
{

};

class MainMenu : public GameState
{
  Aspen::Graphics::UI::Text *title;
  Aspen::Graphics::UI::Text *titleScore;
  Aspen::Graphics::UI::Text *moveable;
  Aspen::Graphics::Animation *sprite;
public:
  MainMenu(Object *parent = nullptr, std::string name = "MainMenu") : GameState(parent, name)
  {
    title = new Aspen::Graphics::UI::Text("The Game of Game", "default", 64, this, "Title");
    AddChild(title);
    title->GetTransform()->SetPosition(319, 85);
    title->GetTransform()->SetRotation(0.0f);
    title->GetTransform()->SetScale(1, 1);
    title->CreateChild<Aspen::Physics::Rigidbody>();
    titleScore = new Aspen::Graphics::UI::Text("Score: Game/Game", "default", 64, this, "TitleScore");
    titleScore->GetTransform()->SetPosition(319, 300);
    titleScore->GetTransform()->SetRotation(0.0f);
    titleScore->GetTransform()->SetScale(1, 1);
    AddChild(titleScore);
    moveable = new Aspen::Graphics::UI::Text(".", "default", 64, this, "Moveable");
    AddChild(moveable);
    moveable->GetTransform()->SetPosition(319, 200);
    moveable->GetTransform()->SetRotation(0.0f);
    moveable->GetTransform()->SetScale(1, 1);
    moveable->CreateChild<Aspen::Physics::Rigidbody>();

    sprite = new Aspen::Graphics::Animation(new Aspen::Graphics::UniformSpritesheet("./resources/Firing Cycle.png", 32, 32, 8, nullptr, "FiringCycle"), 1.0f / 12.0f, this, "Firing Cycle");
    sprite->GetTransform()->SetPosition(100, 100);
    AddChild(sprite);
  }

  void OnUpdate()
  {
    double xv = moveable->GetRigidbody()->GetVelocityX();
    double yv = moveable->GetRigidbody()->GetVelocityY();

    if (Aspen::Input::KeyHeld(SDLK_a)){
      xv = -5;
    }if (Aspen::Input::KeyHeld(SDLK_d)){
      xv = 5;
    }if (Aspen::Input::KeyHeld(SDLK_w)){
      yv = -5;
    }if (Aspen::Input::KeyHeld(SDLK_s)){
      yv = 5;
    }
    moveable->GetRigidbody()->SetCartesianVelocity(xv, yv);

    if (Aspen::Input::KeyHeld(SDLK_g))
    {
      Aspen::Log::Info("G is held");
      title->GetRigidbody()->SetCartesianVelocity(5, 0);
    }
    if (Aspen::Input::KeyHeld(SDLK_SPACE))
    {
      Aspen::Log::Info("Space is held");
      if(xadjust == 945)
      {
        xadjust = -300;
      }else if(xadjust == -300){
        xadjust = 945;
      }
      if (Aspen::Input::KeyHeld(SDLK_h))
      {
        Aspen::Log::Info("H key is held");
        title->GetTransform()->SetPosition(xadjust, 124);
        xadjust++;
      }else if (Aspen::Input::KeyHeld(SDLK_f))
      {
        Aspen::Log::Info("F key is held");
        title->GetTransform()->SetPosition(xadjust, 124);
        xadjust--;
      }
      else
      {
        xadjust = 319;
        //title->GetTransform()->SetPosition(319, 124);
      }
    }
    else
    {
      
      if(xadjust == 945)
      {
        xadjust = -300;
      }else if(xadjust == -300){
       xadjust = 945;
      }
      if (Aspen::Input::KeyHeld(SDLK_h))
      {
        Aspen::Log::Info("H key is held");
        title->GetTransform()->SetPosition(xadjust, 85);
        xadjust++;
      }else if (Aspen::Input::KeyHeld(SDLK_f))
      {
        Aspen::Log::Info("F key is held");
        title->GetTransform()->SetPosition(xadjust, 85);
        xadjust--;
      }
      else
      {
        xadjust = 319;
        //title->GetTransform()->SetPosition(319, 85);
      }
    }
  }
};

class Game : public GameState
{
};

int main(int argc, char **argv)
{
  Aspen::Log::Log::SetFile("./Aspen.log");

  Engine engine(Aspen::Engine::START_FLAGS::ALL);
  engine.FindChildOfType<Aspen::Physics::Physics>()->SetGravityStrength(0);
  engine.FindChildOfType<Aspen::Physics::Physics>()->SetDrag(0.1);
  engine.FindChildOfType<Aspen::Time::Time>()->TargetFramerate(60);
  engine.FindChildOfType<Aspen::Graphics::Graphics>()->FindChildOfType<Aspen::Graphics::FontCache>()->LoadFont("resources/ABeeZee-Regular.ttf", "default");

  engine.FindChildOfType<GameStateManager>()->LoadState<MainMenu>(true);
  //engine.FindChildOfType<GameStateManager>()->LoadState<Game>(false);

  while (engine)
    engine();
  return 0;
}
